{"ast":null,"code":"import _objectSpread from\"C:/Git/VotingAid-1/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"C:/Git/VotingAid-1/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"component\"],_excluded2=[\"component\"],_excluded3=[\"component\"];import{Route,Redirect}from'react-router-dom';import jwt from'jwt-decode';// Simple Auth check with out token just to stop us to navigate in any private route\nimport{jsx as _jsx}from\"react/jsx-runtime\";export var CandidateRoute=function CandidateRoute(_ref){var Component=_ref.component,rest=_objectWithoutProperties(_ref,_excluded);return/*#__PURE__*/_jsx(Route,_objectSpread(_objectSpread({},rest),{},{render:function render(props){return(// Here need to check if Token exist because is unsecure\ngetLoginStatus()===\"Candidate\"||getLoginStatus()===\"Admin\"// TODO: TOKEN\n?/*#__PURE__*/_jsx(Component,_objectSpread({},props)):/*#__PURE__*/_jsx(Redirect,{to:{pathname:'/Login',state:{from:props.location}}}));}}));};// Simple Auth check with out token just to stop us to navigate in any private route\nexport var AdminRoute=function AdminRoute(_ref2){var Component=_ref2.component,rest=_objectWithoutProperties(_ref2,_excluded2);return/*#__PURE__*/_jsx(Route,_objectSpread(_objectSpread({},rest),{},{render:function render(props){return(// Here need to check if Token exist because is unsecure\ngetLoginStatus()===\"Admin\"// TODO: TOKEN\n?/*#__PURE__*/_jsx(Component,_objectSpread({},props)):/*#__PURE__*/_jsx(Redirect,{to:{pathname:'/Login',state:{from:props.location}}}));}}));};// Simple Auth check with out token just to stop us to navigate in any private route\nexport var PublicRoute=function PublicRoute(_ref3){var Component=_ref3.component,rest=_objectWithoutProperties(_ref3,_excluded3);return/*#__PURE__*/_jsx(Route,_objectSpread(_objectSpread({},rest),{},{render:function render(props){return(// Here need to check if Token exist because is unsecure\n!getLoginStatus()// TODO: TOKEN\n?/*#__PURE__*/_jsx(Component,_objectSpread({},props)):/*#__PURE__*/_jsx(Redirect,{to:{pathname:'/Login',state:{from:props.location}}}));}}));};var getLoginStatus=function getLoginStatus(){var storedToken=sessionStorage.getItem(\"token\");var decodedToken=storedToken?jwt(storedToken):'';console.log(decodedToken);return decodedToken.status;};","map":{"version":3,"sources":["C:/Git/VotingAid-1/client/src/navigation/routeValidation.js"],"names":["Route","Redirect","jwt","CandidateRoute","Component","component","rest","props","getLoginStatus","pathname","state","from","location","AdminRoute","PublicRoute","storedToken","sessionStorage","getItem","decodedToken","console","log","status"],"mappings":"iYAAA,OAASA,KAAT,CAAgBC,QAAhB,KAAgC,kBAAhC,CACA,MAAOC,CAAAA,GAAP,KAAgB,YAAhB,CAEA;2CACA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,UAAcC,CAAAA,SAAd,MAAGC,SAAH,CAA4BC,IAA5B,6DAC1B,KAAC,KAAD,gCAAWA,IAAX,MAAiB,MAAM,CAAE,gBAACC,KAAD,QACrB;AACAC,cAAc,KAAO,WAArB,EACIA,cAAc,KAAO,OAAQ;AADjC,cAEM,KAAC,SAAD,kBAAeD,KAAf,EAFN,cAGM,KAAC,QAAD,EAAU,EAAE,CAAE,CACZE,QAAQ,CAAE,QADE,CAEZC,KAAK,CAAE,CAAEC,IAAI,CAAEJ,KAAK,CAACK,QAAd,CAFK,CAAd,EALe,GAAzB,GAD0B,EAAvB,CAaP;AACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,WAAcT,CAAAA,SAAd,OAAGC,SAAH,CAA4BC,IAA5B,+DACtB,KAAC,KAAD,gCAAWA,IAAX,MAAiB,MAAM,CAAE,gBAACC,KAAD,QACrB;AACAC,cAAc,KAAO,OAAQ;AAA7B,cACM,KAAC,SAAD,kBAAeD,KAAf,EADN,cAEM,KAAC,QAAD,EAAU,EAAE,CAAE,CACZE,QAAQ,CAAE,QADE,CAEZC,KAAK,CAAE,CAAEC,IAAI,CAAEJ,KAAK,CAACK,QAAd,CAFK,CAAd,EAJe,GAAzB,GADsB,EAAnB,CAYP;AACA,MAAO,IAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,WAAcV,CAAAA,SAAd,OAAGC,SAAH,CAA4BC,IAA5B,+DACvB,KAAC,KAAD,gCAAWA,IAAX,MAAiB,MAAM,CAAE,gBAACC,KAAD,QACrB;AACA,CAACC,cAAc,EAAG;AAAlB,cACM,KAAC,SAAD,kBAAeD,KAAf,EADN,cAEM,KAAC,QAAD,EAAU,EAAE,CAAE,CACZE,QAAQ,CAAE,QADE,CAEZC,KAAK,CAAE,CAAEC,IAAI,CAAEJ,KAAK,CAACK,QAAd,CAFK,CAAd,EAJe,GAAzB,GADuB,EAApB,CAYP,GAAMJ,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CACzB,GAAMO,CAAAA,WAAW,CAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAApB,CACA,GAAMC,CAAAA,YAAY,CAAGH,WAAW,CAAGb,GAAG,CAACa,WAAD,CAAN,CAAsB,EAAtD,CACAI,OAAO,CAACC,GAAR,CAAYF,YAAZ,EACA,MAAOA,CAAAA,YAAY,CAACG,MAApB,CACH,CALD","sourcesContent":["import { Route, Redirect } from 'react-router-dom';\r\nimport jwt from 'jwt-decode'\r\n\r\n// Simple Auth check with out token just to stop us to navigate in any private route\r\nexport const CandidateRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={(props) => (\r\n        // Here need to check if Token exist because is unsecure\r\n        getLoginStatus() === \"Candidate\" ||\r\n            getLoginStatus() === \"Admin\" // TODO: TOKEN\r\n            ? <Component {...props} />\r\n            : <Redirect to={{\r\n                pathname: '/Login',\r\n                state: { from: props.location }\r\n            }} />\r\n    )} />\r\n)\r\n\r\n// Simple Auth check with out token just to stop us to navigate in any private route\r\nexport const AdminRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={(props) => (\r\n        // Here need to check if Token exist because is unsecure\r\n        getLoginStatus() === \"Admin\" // TODO: TOKEN\r\n            ? <Component {...props} />\r\n            : <Redirect to={{\r\n                pathname: '/Login',\r\n                state: { from: props.location }\r\n            }} />\r\n    )} />\r\n)\r\n\r\n// Simple Auth check with out token just to stop us to navigate in any private route\r\nexport const PublicRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={(props) => (\r\n        // Here need to check if Token exist because is unsecure\r\n        !getLoginStatus() // TODO: TOKEN\r\n            ? <Component {...props} />\r\n            : <Redirect to={{\r\n                pathname: '/Login',\r\n                state: { from: props.location }\r\n            }} />\r\n    )} />\r\n)\r\n\r\nconst getLoginStatus = () => {\r\n    const storedToken = sessionStorage.getItem(\"token\")\r\n    const decodedToken = storedToken ? jwt(storedToken) : ''\r\n    console.log(decodedToken);\r\n    return decodedToken.status;\r\n}"]},"metadata":{},"sourceType":"module"}