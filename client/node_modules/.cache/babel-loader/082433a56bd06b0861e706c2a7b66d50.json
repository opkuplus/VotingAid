{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\VotingAid-1\\\\client\\\\src\\\\navigation\\\\routeValidation.js\";\nimport { Route, Redirect } from 'react-router-dom';\nimport jwt from 'jwt-decode'; // Simple Auth check with out token just to stop us to navigate in any private route\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CandidateRoute = ({\n  component: Component,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(Route, { ...rest,\n  render: props => // Here need to check if Token exist because is unsecure\n  getLoginStatus() === \"Candidate\" || getLoginStatus() === \"Admin\" // TODO: TOKEN\n  ? /*#__PURE__*/_jsxDEV(Component, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 15\n  }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n    to: {\n      pathname: '/Login',\n      state: {\n        from: props.location\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 15\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 5\n}, this); // Simple Auth check with out token just to stop us to navigate in any private route\n\n_c = CandidateRoute;\nexport const AdminRoute = ({\n  component: Component,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(Route, { ...rest,\n  render: props => // Here need to check if Token exist because is unsecure\n  getLoginStatus() === \"Admin\" // TODO: TOKEN\n  ? /*#__PURE__*/_jsxDEV(Component, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 15\n  }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n    to: {\n      pathname: '/Login',\n      state: {\n        from: props.location\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 15\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 20,\n  columnNumber: 5\n}, this); // Simple Auth check with out token just to stop us to navigate in any private route\n\n_c2 = AdminRoute;\nexport const PublicRoute = ({\n  component: Component,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(Route, { ...rest,\n  render: props => // Here need to check if Token exist because is unsecure\n  !getLoginStatus() // TODO: TOKEN\n  ? /*#__PURE__*/_jsxDEV(Component, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 15\n  }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n    to: {\n      pathname: '/Login',\n      state: {\n        from: props.location\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 15\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 33,\n  columnNumber: 5\n}, this);\n_c3 = PublicRoute;\n\nconst getLoginStatus = () => {\n  const storedToken = sessionStorage.getItem(\"token\");\n  const decodedToken = storedToken ? jwt(storedToken) : '';\n  console.log(decodedToken);\n  return decodedToken.status;\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CandidateRoute\");\n$RefreshReg$(_c2, \"AdminRoute\");\n$RefreshReg$(_c3, \"PublicRoute\");","map":{"version":3,"sources":["C:/Git/VotingAid-1/client/src/navigation/routeValidation.js"],"names":["Route","Redirect","jwt","CandidateRoute","component","Component","rest","props","getLoginStatus","pathname","state","from","location","AdminRoute","PublicRoute","storedToken","sessionStorage","getItem","decodedToken","console","log","status"],"mappings":";AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,GAAP,MAAgB,YAAhB,C,CAEA;;;AACA,OAAO,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,kBAC1B,QAAC,KAAD,OAAWA,IAAX;AAAiB,EAAA,MAAM,EAAGC,KAAD,IACrB;AACAC,EAAAA,cAAc,OAAO,WAArB,IACIA,cAAc,OAAO,OADzB,CACiC;AADjC,iBAEM,QAAC,SAAD,OAAeD;AAAf;AAAA;AAAA;AAAA;AAAA,UAFN,gBAGM,QAAC,QAAD;AAAU,IAAA,EAAE,EAAE;AACZE,MAAAA,QAAQ,EAAE,QADE;AAEZC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAEJ,KAAK,CAACK;AAAd;AAFK;AAAd;AAAA;AAAA;AAAA;AAAA;AALV;AAAA;AAAA;AAAA;AAAA,QADG,C,CAaP;;KAbaT,c;AAcb,OAAO,MAAMU,UAAU,GAAG,CAAC;AAAET,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,kBACtB,QAAC,KAAD,OAAWA,IAAX;AAAiB,EAAA,MAAM,EAAGC,KAAD,IACrB;AACAC,EAAAA,cAAc,OAAO,OAArB,CAA6B;AAA7B,iBACM,QAAC,SAAD,OAAeD;AAAf;AAAA;AAAA;AAAA;AAAA,UADN,gBAEM,QAAC,QAAD;AAAU,IAAA,EAAE,EAAE;AACZE,MAAAA,QAAQ,EAAE,QADE;AAEZC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAEJ,KAAK,CAACK;AAAd;AAFK;AAAd;AAAA;AAAA;AAAA;AAAA;AAJV;AAAA;AAAA;AAAA;AAAA,QADG,C,CAYP;;MAZaC,U;AAab,OAAO,MAAMC,WAAW,GAAG,CAAC;AAAEV,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,kBACvB,QAAC,KAAD,OAAWA,IAAX;AAAiB,EAAA,MAAM,EAAGC,KAAD,IACrB;AACA,GAACC,cAAc,EAAf,CAAkB;AAAlB,iBACM,QAAC,SAAD,OAAeD;AAAf;AAAA;AAAA;AAAA;AAAA,UADN,gBAEM,QAAC,QAAD;AAAU,IAAA,EAAE,EAAE;AACZE,MAAAA,QAAQ,EAAE,QADE;AAEZC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAEJ,KAAK,CAACK;AAAd;AAFK;AAAd;AAAA;AAAA;AAAA;AAAA;AAJV;AAAA;AAAA;AAAA;AAAA,QADG;MAAME,W;;AAYb,MAAMN,cAAc,GAAG,MAAM;AACzB,QAAMO,WAAW,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAApB;AACA,QAAMC,YAAY,GAAGH,WAAW,GAAGb,GAAG,CAACa,WAAD,CAAN,GAAsB,EAAtD;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACA,SAAOA,YAAY,CAACG,MAApB;AACH,CALD","sourcesContent":["import { Route, Redirect } from 'react-router-dom';\r\nimport jwt from 'jwt-decode'\r\n\r\n// Simple Auth check with out token just to stop us to navigate in any private route\r\nexport const CandidateRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={(props) => (\r\n        // Here need to check if Token exist because is unsecure\r\n        getLoginStatus() === \"Candidate\" ||\r\n            getLoginStatus() === \"Admin\" // TODO: TOKEN\r\n            ? <Component {...props} />\r\n            : <Redirect to={{\r\n                pathname: '/Login',\r\n                state: { from: props.location }\r\n            }} />\r\n    )} />\r\n)\r\n\r\n// Simple Auth check with out token just to stop us to navigate in any private route\r\nexport const AdminRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={(props) => (\r\n        // Here need to check if Token exist because is unsecure\r\n        getLoginStatus() === \"Admin\" // TODO: TOKEN\r\n            ? <Component {...props} />\r\n            : <Redirect to={{\r\n                pathname: '/Login',\r\n                state: { from: props.location }\r\n            }} />\r\n    )} />\r\n)\r\n\r\n// Simple Auth check with out token just to stop us to navigate in any private route\r\nexport const PublicRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={(props) => (\r\n        // Here need to check if Token exist because is unsecure\r\n        !getLoginStatus() // TODO: TOKEN\r\n            ? <Component {...props} />\r\n            : <Redirect to={{\r\n                pathname: '/Login',\r\n                state: { from: props.location }\r\n            }} />\r\n    )} />\r\n)\r\n\r\nconst getLoginStatus = () => {\r\n    const storedToken = sessionStorage.getItem(\"token\")\r\n    const decodedToken = storedToken ? jwt(storedToken) : ''\r\n    console.log(decodedToken);\r\n    return decodedToken.status;\r\n}"]},"metadata":{},"sourceType":"module"}